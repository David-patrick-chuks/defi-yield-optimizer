import React, { useState } from 'react';
import MainLayout from '@/components/layout/MainLayout';
import StrategyCard from '@/components/yield/StrategyCard';
import { useYield } from '@/context/YieldContext';
import { useWallet } from '@/context/WalletContext';
import { Button } from '@/components/ui/button';
import LoadingAI from '@/components/ui/LoadingAI';
import { Bot } from 'lucide-react';
import { toast } from '@/components/ui/sonner';

const Strategies = () => {
  const { userPositions, optimizeYield, executeStrategy } = useYield();
  const { isConnected } = useWallet();
  const [generatingStrategy, setGeneratingStrategy] = useState(false);
  const [strategyGenerated, setStrategyGenerated] = useState(false);

  // Current average APY across all positions
  const currentAverageApy = userPositions.length > 0
    ? userPositions.reduce((sum, pos) => sum + pos.apy, 0) / userPositions.length
    : 0;

  const handleGenerateStrategy = async () => {
    setGeneratingStrategy(true);
    try {
      await optimizeYield();
      setStrategyGenerated(true);
    } catch (error) {
      console.error("Failed to generate strategy:", error);
      toast.error("Failed to generate strategy");
    } finally {
      setGeneratingStrategy(false);
    }
  };

  const handleExecuteStrategy = async (strategyName: string) => {
    try {
      await executeStrategy(strategyName);
      toast.success("Strategy execution initiated!");
    } catch (error) {
      console.error("Failed to execute strategy:", error);
      toast.error("Failed to execute strategy");
    }
  };

  // Example strategies - in a real application these would be generated by the AI
  const strategies = [
    {
      title: "Balanced Yield Optimizer",
      description: "This strategy rebalances your portfolio to achieve higher yields while maintaining a low risk profile by allocating funds across established Base protocols.",
      currentApy: currentAverageApy,
      targetApy: currentAverageApy + 2.3,
      riskLevel: 'low' as const,
      action: "balanced"
    },
    {
      title: "Aggressive Growth Strategy",
      description: "Maximize your yield potential by redistributing assets to higher APY pools with a moderate risk tolerance, focusing on newer protocols with higher returns.",
      currentApy: currentAverageApy,
      targetApy: currentAverageApy + 5.8,
      riskLevel: 'moderate' as const,
      action: "aggressive"
    },
    {
      title: "Innovative Yield Farming",
      description: "Explore emerging opportunities in newly launched Base protocols with exceptional yield potential, while assuming higher risk for potentially superior returns.",
      currentApy: currentAverageApy,
      targetApy: currentAverageApy + 12.5,
      riskLevel: 'high' as const,
      action: "innovative"
    }
  ];

  return (
    <MainLayout>
      <div className="container mx-auto py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">AI Yield Strategies</h1>
          <p className="text-slate-600">
            Let our AI agent analyze your portfolio and generate optimized yield strategies to maximize your returns.
          </p>
        </div>

        {!isConnected ? (
          <div className="bg-slate-50 border border-slate-200 rounded-lg p-8 text-center">
            <Bot size={48} className="mx-auto mb-4 text-sage-500" />
            <h2 className="text-xl font-semibold mb-2">Connect Your Wallet</h2>
            <p className="text-slate-600 mb-4">
              Please connect your wallet to generate personalized yield strategies.
            </p>
          </div>
        ) : generatingStrategy ? (
          <div className="py-12">
            <LoadingAI text="AI Optimizing Your Yield Strategy" />
          </div>
        ) : !strategyGenerated ? (
          <div className="bg-sage-50 border border-sage-200 rounded-lg p-8 text-center">
            <Bot size={48} className="mx-auto mb-4 text-sage-600" />
            <h2 className="text-xl font-semibold mb-2">Generate Yield Strategy</h2>
            <p className="text-slate-600 mb-6">
              Our AI agent will analyze your portfolio and current market conditions to recommend optimal yield strategies.
            </p>
            <Button 
              onClick={handleGenerateStrategy} 
              size="lg"
              className="bg-sage-600 hover:bg-sage-700"
            >
              Generate Strategy
            </Button>
          </div>
        ) : (
          <div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
              {strategies.map((strategy) => (
                <StrategyCard
                  key={strategy.title}
                  title={strategy.title}
                  description={strategy.description}
                  currentApy={strategy.currentApy}
                  targetApy={strategy.targetApy}
                  riskLevel={strategy.riskLevel}
                  onExecute={() => handleExecuteStrategy(strategy.action)}
                />
              ))}
            </div>
            
            <div className="bg-slate-50 border border-slate-200 rounded-lg p-4 mt-6">
              <h3 className="text-lg font-medium mb-2">How It Works</h3>
              <p className="text-slate-600 text-sm">
                Our AI agent analyzes on-chain data across multiple DeFi protocols on Base to identify the most efficient yield strategies for your stablecoin assets. When you execute a strategy, the agent will automatically rebalance your portfolio by interacting with the relevant smart contracts to optimize your returns.
              </p>
            </div>
          </div>
        )}
      </div>
    </MainLayout>
  );
};

export default Strategies;
